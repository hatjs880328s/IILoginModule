// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contacts.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Contacts.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ContactsRoot

@implementation ContactsRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ContactsRoot_FileDescriptor

static GPBFileDescriptor *ContactsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"contacts"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - org

@implementation org

@dynamic id_p;
@dynamic name;
@dynamic nameGlobal;
@dynamic pinyin;
@dynamic parentId;
@dynamic sortOrder;

typedef struct org__storage_ {
  uint32_t _has_storage_[1];
  int32_t sortOrder;
  NSString *id_p;
  NSString *name;
  NSString *nameGlobal;
  NSString *pinyin;
  NSString *parentId;
} org__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = org_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(org__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = org_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(org__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nameGlobal",
        .dataTypeSpecific.className = NULL,
        .number = org_FieldNumber_NameGlobal,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(org__storage_, nameGlobal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pinyin",
        .dataTypeSpecific.className = NULL,
        .number = org_FieldNumber_Pinyin,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(org__storage_, pinyin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "parentId",
        .dataTypeSpecific.className = NULL,
        .number = org_FieldNumber_ParentId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(org__storage_, parentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sortOrder",
        .dataTypeSpecific.className = NULL,
        .number = org_FieldNumber_SortOrder,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(org__storage_, sortOrder),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[org class]
                                     rootClass:[ContactsRoot class]
                                          file:ContactsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(org__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - user

@implementation user

@dynamic id_p;
@dynamic realName;
@dynamic nameGlobal;
@dynamic pinyin;
@dynamic mobile;
@dynamic email;
@dynamic parentId;
@dynamic hasHead;
@dynamic sortOrder;
@dynamic office;
@dynamic tel;

typedef struct user__storage_ {
  uint32_t _has_storage_[1];
  int32_t hasHead;
  int32_t sortOrder;
  NSString *id_p;
  NSString *realName;
  NSString *nameGlobal;
  NSString *pinyin;
  NSString *mobile;
  NSString *email;
  NSString *parentId;
  NSString *office;
  NSString *tel;
} user__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = user_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(user__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "realName",
        .dataTypeSpecific.className = NULL,
        .number = user_FieldNumber_RealName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(user__storage_, realName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nameGlobal",
        .dataTypeSpecific.className = NULL,
        .number = user_FieldNumber_NameGlobal,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(user__storage_, nameGlobal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pinyin",
        .dataTypeSpecific.className = NULL,
        .number = user_FieldNumber_Pinyin,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(user__storage_, pinyin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mobile",
        .dataTypeSpecific.className = NULL,
        .number = user_FieldNumber_Mobile,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(user__storage_, mobile),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = user_FieldNumber_Email,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(user__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "parentId",
        .dataTypeSpecific.className = NULL,
        .number = user_FieldNumber_ParentId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(user__storage_, parentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hasHead",
        .dataTypeSpecific.className = NULL,
        .number = user_FieldNumber_HasHead,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(user__storage_, hasHead),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sortOrder",
        .dataTypeSpecific.className = NULL,
        .number = user_FieldNumber_SortOrder,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(user__storage_, sortOrder),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "office",
        .dataTypeSpecific.className = NULL,
        .number = user_FieldNumber_Office,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(user__storage_, office),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tel",
        .dataTypeSpecific.className = NULL,
        .number = user_FieldNumber_Tel,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(user__storage_, tel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[user class]
                                     rootClass:[ContactsRoot class]
                                          file:ContactsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(user__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - orgs

@implementation orgs

@dynamic lastQueryTime;
@dynamic orgsArray, orgsArray_Count;
@dynamic rootId;

typedef struct orgs__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *orgsArray;
  NSString *rootId;
  int64_t lastQueryTime;
} orgs__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lastQueryTime",
        .dataTypeSpecific.className = NULL,
        .number = orgs_FieldNumber_LastQueryTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(orgs__storage_, lastQueryTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "orgsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(org),
        .number = orgs_FieldNumber_OrgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(orgs__storage_, orgsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rootId",
        .dataTypeSpecific.className = NULL,
        .number = orgs_FieldNumber_RootId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(orgs__storage_, rootId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[orgs class]
                                     rootClass:[ContactsRoot class]
                                          file:ContactsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(orgs__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\r\000\003\005A\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - users

@implementation users

@dynamic lastQueryTime;
@dynamic usersArray, usersArray_Count;

typedef struct users__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *usersArray;
  int64_t lastQueryTime;
} users__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lastQueryTime",
        .dataTypeSpecific.className = NULL,
        .number = users_FieldNumber_LastQueryTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(users__storage_, lastQueryTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "usersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(user),
        .number = users_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(users__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[users class]
                                     rootClass:[ContactsRoot class]
                                          file:ContactsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(users__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
